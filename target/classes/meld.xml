<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:context="http://www.springframework.org/schema/context" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
	<http:request-config name="MeldHTTP" host="#[flowVars.httpHost]" port="#[flowVars.httpPort]" basePath="#[flowVars.httpBasePath]" doc:name="HTTP Request Configuration" responseTimeout="600000"/>
	<http:request-config name="MeldHTTPS" protocol="HTTPS" host="#[flowVars.httpHost]" port="#[Integer.parseInt(flowVars.httpPort)]" basePath="#[flowVars.httpBasePath]" doc:name="HTTP Request Configuration" responseTimeout="600000"/>
    <vm:connector name="MeldVM" validateConnections="true" doc:name="VM"/>
    <context:property-placeholder location="meld.properties"/>
    <flow name="meldFlow" processingStrategy="asynchronous">
        <vm:inbound-endpoint exchange-pattern="one-way" path="SendToMeld" connector-ref="MeldVM" doc:name="Meld Queue"/>
        <logger message="Recieved #[payload]" level="INFO" doc:name="Logger"/>
        <expression-component doc:name="Set Variables"><![CDATA[flowVars.destination = payload.destination;
payload = payload.data;
]]></expression-component>
        <logger message="flowVars.destination = #[flowVars.destination.properties]" level="INFO" doc:name="Logger"/>
        <flow-ref name="deliverToDestination_meld2" doc:name="SyncSendToMeld"/>
    </flow>
    <sub-flow name="deliverToDestination_meld2">
    	<expression-component doc:name="Set MELD params">
            	<![CDATA[flowVars.meldScope = flowVars.destination.properties.scope == empty ? "${meld.scope}" :  flowVars.destination.properties.scope ;
flowVars.meldType = flowVars.destination.properties.type == empty ? "${meld.type}" : flowVars.destination.properties.type;
flowVars.meldTable = flowVars.destination.properties.table == empty ? "${meld.table}" : flowVars.destination.properties.table;
flowVars.meldQuery = flowVars.destination.properties.queryParams == empty ? "${meld.queryParams}" : flowVars.destination.properties.queryParams;
flowVars.httpHost = flowVars.destination.properties.host == empty ? "${meld.host}" : flowVars.destination.properties.host;
flowVars.httpPort = flowVars.destination.properties.port == empty ? ${meld.port} : flowVars.destination.properties.port;
flowVars.meldApiKey = flowVars.destination.properties.apiKey == empty ? "${meld.apiKey}" : flowVars.destination.properties.apiKey;
flowVars.httpBasePath = flowVars.destination.properties.baseUri == empty ? "${meld.baseUri}" : flowVars.destination.properties.baseUri;
flowVars.useTLS = flowVars.destination.properties.useTLS == empty ? ${meld.useTLS} : flowVars.destination.properties.useTLS;
flowVars.responseTimeout = (flowVars.destination.properties.timeout == empty) ? ${meld.response.timeout} : flowVars.destination.properties.responseTimeout;
flowVars.meldMethod = (flowVars.destination.properties.method == empty) ? "POST" : flowVars.destination.properties.method;
						]]>
		</expression-component>
        <logger message="Posting new data: #[payload], #[flowVars]" level="INFO" doc:name="Logger"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <until-successful maxRetries="3"
                failureExpression="#[exception != null &amp;&amp; exception.causedBy(java.net.ConnectException))]"
                doc:name="Until Successful" synchronous="true" millisBetweenRetries="10000">
        <choice doc:name="Choice">
        	<when expression="#[flowVars.useTLS != empty &amp;&amp; flowVars.useTLS == 'true']">
        		<logger message="Using HTTPS for MELD delivery." level="DEBUG" doc:name="Logger"/>
                <http:request config-ref="MeldHTTPS" path="#[flowVars.meldScope]/#[flowVars.meldType]/#[flowVars.meldTable]?#[flowVars.meldQuery]" method="#[flowVars.meldMethod]" doc:name="HTTPS" responseTimeout="#[flowVars.responseTimeout]">
                       <http:request-builder>
                            <http:header headerName="Authorization" value="#[flowVars.meldApiKey]"/>
                            <http:header headerName="Accept" value="application/json"/>
                            <http:header headerName="Content-Type" value="application/json"/>

                     		</http:request-builder>
		         </http:request>
            </when>
            <otherwise>
                <http:request config-ref="MeldHTTP" path="#[flowVars.meldScope]/#[flowVars.meldType]/#[flowVars.meldTable]?#[flowVars.meldQuery]" method="#[flowVars.meldMethod]" doc:name="HTTP" responseTimeout="#[flowVars.responseTimeout]">
                       <http:request-builder>
                            <http:header headerName="Authorization" value="#[flowVars.meldApiKey]"/>
                            <http:header headerName="Accept" value="application/json"/>
                            <http:header headerName="Content-Type" value="application/json"/>
		
                       </http:request-builder>
		        </http:request>
            </otherwise>
        </choice>
        </until-successful>
        <json:json-to-object-transformer doc:name="JSON to Object"/>
        <logger message="Submit to MELD returned #[payload], request = #[flowVars.meldScope]/#[flowVars.meldType]/#[flowVars.meldTable]?#[flowVars.meldQuery]" level="INFO" doc:name="Logger"/>
    </sub-flow>
</mule>